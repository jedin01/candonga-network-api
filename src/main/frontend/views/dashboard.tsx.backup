import { ViewConfig } from "@vaadin/hilla-file-router/types.js";
import {
  Button,
  HorizontalLayout,
  VerticalLayout,
  Card,
  ProgressBar,
} from "@vaadin/react-components";
import {
  TaskService,
  CategoriaParagemService,
  ParagemService,
  RotaService,
} from "Frontend/generated/endpoints";
import { useSignal } from "@vaadin/hilla-react-signals";
import { Group, ViewToolbar } from "Frontend/components/ViewToolbar";
import { useEffect } from "react";

export const config: ViewConfig = {
  title: "Dashboard",
  menu: {
    icon: "vaadin:dashboard",
    order: 0,
    title: "Dashboard",
  },
};

interface SystemStats {
  tasks: {
    total: number;
    completed: number;
    pending: number;
    overdue: number;
    completionRate: number;
  };
  categorias: number;
  paragens: number;
  rotas: number;
  precoStats?: {
    precoMinimo: number;
    precoMaximo: number;
    precoMedio: number;
  };
  distanciaStats?: {
    distanciaMinima: number;
    distanciaMaxima: number;
    distanciaMedia: number;
  };
}

export default function DashboardView() {
  const stats = useSignal<SystemStats | null>(null);
  const loading = useSignal(false);
  const lastUpdate = useSignal<Date | null>(null);

  const loadSystemStats = async () => {
    loading.value = true;
    try {
      const [
        taskStats,
        categoriasCount,
        paragensCount,
        rotasCount,
        precoStats,
        distanciaStats,
      ] = await Promise.all([
        TaskService.getStatistics(),
        CategoriaParagemService.contarTotal(),
        ParagemService.contarTotal(),
        RotaService.contarTotal(),
        RotaService.obterEstatisticasPrecos(),
        RotaService.obterEstatisticasDistancias(),
      ]);

      stats.value = {
        tasks: {
          total: taskStats.totalTasks,
          completed: taskStats.completedTasks,
          pending: taskStats.pendingTasks,
          overdue: taskStats.overdueTasks,
          completionRate: taskStats.completionRate || 0,
        },
        categorias: categoriasCount,
        paragens: paragensCount,
        rotas: rotasCount,
        precoStats,
        distanciaStats,
      };

      lastUpdate.value = new Date();
    } catch (error) {
      console.error("Error loading system statistics:", error);
    } finally {
      loading.value = false;
    }
  };

  useEffect(() => {
    loadSystemStats();
    const interval = setInterval(loadSystemStats, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL",
    }).format(value);
  };

  const formatDistance = (value: number) => {
    return `${value.toFixed(2)} km`;
  };

  const formatPercentage = (value: number) => {
    return `${value.toFixed(1)}%`;
  };

  const getCompletionColor = (rate: number) => {
    if (rate >= 80) return "#4caf50";
    if (rate >= 60) return "#ff9800";
    return "#f44336";
  };

  const getTaskStatusColor = (type: string) => {
    switch (type) {
      case "completed":
        return "#4caf50";
      case "pending":
        return "#2196f3";
      case "overdue":
        return "#f44336";
      default:
        return "#666";
    }
  };

  if (loading.value && !stats.value) {
    return (
      <main className="dashboard-container">
        <div className="dashboard-content">
          <ViewToolbar title="Dashboard do Sistema">
            <Group>
              <ProgressBar indeterminate />
            </Group>
          </ViewToolbar>
        </div>
      </main>
    );
  }

  return (
    <main className="dashboard-container">
      <div className="dashboard-content">
        <ViewToolbar title="Dashboard do Sistema Indika">
          <Group>
            <Button
              onClick={loadSystemStats}
              theme="secondary"
              disabled={loading.value}
            >
              {loading.value ? "Atualizando..." : "Atualizar"}
            </Button>
            {lastUpdate.value && (
              <span style={{ fontSize: "0.85em", color: "#666" }}>
                √öltima atualiza√ß√£o: {lastUpdate.value.toLocaleTimeString()}
              </span>
            )}
          </Group>
        </ViewToolbar>

        {stats.value && (
          <>
            {/* Quick Stats Cards */}
            <div className="stats-grid">
              <Card className="stat-card">
                <h3 className="stat-title" style={{ color: "#1976d2" }}>
                  üìã Tarefas
                </h3>
                <div className="stat-value">{stats.value.tasks.total}</div>
                <div className="stat-description">
                  {stats.value.tasks.completed} conclu√≠das ‚Ä¢{" "}
                  {stats.value.tasks.pending} pendentes
                  {stats.value.tasks.overdue > 0 && (
                    <span style={{ color: "#f44336" }}>
                      {" "}
                      ‚Ä¢ {stats.value.tasks.overdue} vencidas
                    </span>
                  )}
                </div>
              </Card>

              <Card className="stat-card">
                <h3 className="stat-title" style={{ color: "#388e3c" }}>
                  üè∑Ô∏è Categorias
                </h3>
                <div className="stat-value">{stats.value.categorias}</div>
                <div className="stat-description">Categorias de paragem</div>
              </Card>

              <Card className="stat-card">
                <h3 className="stat-title" style={{ color: "#f57c00" }}>
                  üìç Paragens
                </h3>
                <div className="stat-value">{stats.value.paragens}</div>
                <div className="stat-description">Pontos de paragem</div>
              </Card>

              <Card className="stat-card">
                <h3 className="stat-title" style={{ color: "#7b1fa2" }}>
                  üõ£Ô∏è Rotas
                </h3>
                <div className="stat-value">{stats.value.rotas}</div>
                <div className="stat-description">Rotas cadastradas</div>
              </Card>
            </div>

            {/* Task Progress Section */}
            <Card className="progress-section">
              <h2 style={{ margin: "0 0 1.5rem 0" }}>
                üìä Progresso das Tarefas
              </h2>

              <div className="progress-container">
                <div className="progress-bar-container">
                  <div style={{ marginBottom: "0.5rem" }}>
                    <strong>
                      Taxa de Conclus√£o:{" "}
                      {formatPercentage(stats.value.tasks.completionRate)}
                    </strong>
                  </div>
                  <ProgressBar
                    value={stats.value.tasks.completionRate / 100}
                    style={
                      {
                        width: "100%",
                        "--vaadin-progress-color": getCompletionColor(
                          stats.value.tasks.completionRate,
                        ),
                      } as React.CSSProperties
                    }
                  />
                </div>

                <div className="progress-stats">
                  <div className="progress-stat">
                    <div
                      className="progress-stat-value"
                      style={{
                        color: getTaskStatusColor("completed"),
                      }}
                    >
                      {stats.value.tasks.completed}
                    </div>
                    <div className="progress-stat-label">Conclu√≠das</div>
                  </div>
                  <div className="progress-stat">
                    <div
                      className="progress-stat-value"
                      style={{
                        color: getTaskStatusColor("pending"),
                      }}
                    >
                      {stats.value.tasks.pending}
                    </div>
                    <div className="progress-stat-label">Pendentes</div>
                  </div>
                  {stats.value.tasks.overdue > 0 && (
                    <div className="progress-stat">
                      <div
                        className="progress-stat-value"
                        style={{
                          color: getTaskStatusColor("overdue"),
                        }}
                      >
                        {stats.value.tasks.overdue}
                      </div>
                      <div className="progress-stat-label">Vencidas</div>
                    </div>
                  )}
                </div>
              </div>
            </Card>

            {/* Transport System Stats */}
            <div className="details-grid">
              <Card className="detail-card">
                <h3 style={{ margin: "0 0 1rem 0" }}>
                  üí∞ Estat√≠sticas de Pre√ßos
                </h3>
                {stats.value.precoStats ? (
                  <div className="detail-list">
                    <div className="detail-item">
                      <strong>Menor pre√ßo:</strong>{" "}
                      {formatCurrency(stats.value.precoStats.precoMinimo)}
                    </div>
                    <div className="detail-item">
                      <strong>Maior pre√ßo:</strong>{" "}
                      {formatCurrency(stats.value.precoStats.precoMaximo)}
                    </div>
                    <div className="detail-item">
                      <strong>Pre√ßo m√©dio:</strong>{" "}
                      {formatCurrency(stats.value.precoStats.precoMedio)}
                    </div>
                  </div>
                ) : (
                  <div style={{ color: "#666", fontStyle: "italic" }}>
                    Nenhum dado de pre√ßo dispon√≠vel
                  </div>
                )}
              </Card>

              <Card className="detail-card">
                <h3 style={{ margin: "0 0 1rem 0" }}>
                  üìè Estat√≠sticas de Dist√¢ncias
                </h3>
                {stats.value.distanciaStats ? (
                  <div className="detail-list">
                    <div className="detail-item">
                      <strong>Menor dist√¢ncia:</strong>{" "}
                      {formatDistance(
                        stats.value.distanciaStats.distanciaMinima,
                      )}
                    </div>
                    <div className="detail-item">
                      <strong>Maior dist√¢ncia:</strong>{" "}
                      {formatDistance(
                        stats.value.distanciaStats.distanciaMaxima,
                      )}
                    </div>
                    <div className="detail-item">
                      <strong>Dist√¢ncia m√©dia:</strong>{" "}
                      {formatDistance(
                        stats.value.distanciaStats.distanciaMedia,
                      )}
                    </div>
                  </div>
                ) : (
                  <div style={{ color: "#666", fontStyle: "italic" }}>
                    Nenhum dado de dist√¢ncia dispon√≠vel
                  </div>
                )}
              </Card>
            </div>

            {/* System Status */}
            <Card className="status-card">
              <h3 style={{ margin: "0 0 1rem 0" }}>üö¶ Status do Sistema</h3>

              <div className="status-grid">
                <div
                  className="status-item"
                  style={{
                    backgroundColor:
                      stats.value.paragens > 0 ? "#e8f5e8" : "#fff3e0",
                    borderColor:
                      stats.value.paragens > 0 ? "#4caf50" : "#ff9800",
                  }}
                >
                  <strong>Sistema de Transporte:</strong>
                  <br />
                  {stats.value.paragens > 0 && stats.value.rotas > 0
                    ? "‚úÖ Operacional"
                    : "‚ö†Ô∏è Configura√ß√£o Incompleta"}
                </div>

                <div
                  className="status-item"
                  style={{
                    backgroundColor:
                      stats.value.tasks.total > 0 ? "#e3f2fd" : "#f5f5f5",
                    borderColor:
                      stats.value.tasks.total > 0 ? "#2196f3" : "#ccc",
                  }}
                >
                  <strong>Gest√£o de Tarefas:</strong>
                  <br />
                  {stats.value.tasks.total > 0
                    ? `üìù ${stats.value.tasks.total} tarefas ativas`
                    : "üìã Nenhuma tarefa"}
                </div>
              </div>

              {/* Quick Actions */}
              <div style={{ marginTop: "1.5rem" }}>
                <h4>üöÄ A√ß√µes R√°pidas</h4>
                <div className="action-buttons">
                  <Button
                    theme="primary"
                    onClick={() => (window.location.href = "/task-list")}
                  >
                    Gerenciar Tarefas
                  </Button>
                  <Button
                    theme="secondary"
                    onClick={() => (window.location.href = "/paragem-list")}
                  >
                    Cadastrar Paragens
                  </Button>
                  <Button
                    theme="secondary"
                    onClick={() => (window.location.href = "/rota-list")}
                  >
                    Configurar Rotas
                  </Button>
                  <Button
                    theme="tertiary"
                    onClick={() =>
                      (window.location.href = "/categoria-paragem-list")
                    }
                  >
                    Gerenciar Categorias
                  </Button>
                </div>
              </div>
            </Card>
          </>
        )}
      </div>
    </main>
  );
}
